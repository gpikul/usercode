#include <iostream> 
	//using namespace std;
	#include <vector>
	#include <algorithm>
	#include <math.h>
	#include <stdio.h>
	#include <TString.h>
	#include <TH1F.h>
	#include <TH2F.h>
	#include <TF1.h>
	#include <TTree.h>
	#include <TFile.h>
	#include <TGraph.h>
	#include <TChain.h>
	#include <TNtuple.h>
	#include <TLegend.h>
	#include <TCanvas.h>
	#include <TLine.h>
	#include <TGaxis.h>
	#include <TROOT.h>
	#include <THistPainter.h>

	#define PI 3.14159265
	#define TPI 6.28318531

void special_QAplot_overlay()	{	
	
	//////////////////////////////////////////////////////////////////////
	//		OPEN ROOT FILES
	//////////////////////////////////////////////////////////////////////
	
	TFile *MC = TFile::Open("UltimateMCjetQAv2_akPu3PF.root");
	TFile *DATA = TFile::Open("CombineMergedFiles_PbPbData_akPu3PF.root");
	
	cout << "opened input root files" << endl;

	//TFile *akpu5f = TFile::Open("akpu5edit.root");
	//TFile *ak5f = TFile::Open("ak5edit.root");
	
	//////////////////////////////////////////////////////////////////////
	//		REASSIGN NEW NAMES TO HISTOGRAMS
	//////////////////////////////////////////////////////////////////////
	/*String histogram [10];
	histogram[0] = "jpt_hist";
	histogram[1] = "jpt_hist";
	histogram[2] = "jpt_hist";
	histogram[3] = "jpt_hist";
	histogram[4] = "jpt_hist";
	histogram[5] = "jpt_hist";
	histogram[6] = "jpt_hist";
	histogram[7] = "jpt_hist";
	histogram[8] = "jpt_hist";
	histogram[9] = "jpt_hist";*/
	//////////////////////////////////////////////////////////////////////
	//		REASSIGN NEW NAMES TO HISTOGRAMS
	//////////////////////////////////////////////////////////////////////
	
	//for (int i = 0; i < 10; i++)	{
		//a = Form("a%d", i);
		TH1F *a[11];
		a[0] = (TH1F*)MC->Get("hpT0"); 
  		a[1] = (TH1F*)MC->Get("heta0");
 		a[2] = (TH1F*)MC->Get("hphi0");
		a[3] = (TH1F*)MC->Get("hvz0");
		a[4] = (TH1F*)MC->Get("hbin0");
		/*a[4] = (TH1F*)MC->Get("hphotonMax0");
		a[5] = (TH1F*)MC->Get("hphotonSum0");
		a[6] = (TH1F*)MC->Get("htrackMax0");
		a[7] = (TH1F*)MC->Get("htrackSum0");
		a[8] = (TH1F*)MC->Get("hneutralMax0");
		a[9] = (TH1F*)MC->Get("hneutralSum0");
		a[10] = (TH1F*)MC->Get("hchargedMax0");*/

	//}	

	
		TH1F *b[11];
		b[0] = (TH1F*)DATA->Get("jetptDjtpt"); 
  		b[1] = (TH1F*)DATA->Get("jetptDeta");
 		b[2] = (TH1F*)DATA->Get("jetptDphi");
		b[3] = (TH1F*)DATA->Get("jetptDvz");
		b[4] = (TH1F*)DATA->Get("jetptDbin");

		/*b[4] = (TH1F*)DATA->Get("jetptDphotonMax");
		b[5] = (TH1F*)DATA->Get("jetptDphotonSum");
		b[6] = (TH1F*)DATA->Get("jetptDtrackMax");
		b[7] = (TH1F*)DATA->Get("jetptDtrackSum");
		b[8] = (TH1F*)DATA->Get("jetptDneutralMax");
		b[9] = (TH1F*)DATA->Get("jetptDneutralSum");
		b[10] = (TH1F*)DATA->Get("jetptDchargedMax");*/
		
		for(int i = 0; i < 4; i++)	{
			a[i]->SetStats(kFALSE);
			b[i]->SetStats(kFALSE);
		}

		cout << "fetched relevant histograms" << endl;
		
		
	//a[0]->SetTitle("Transverse Momentum");
	//a[0]->GetXaxis()->SetTitle("Transverse Momentum (Gev/c^2)");
	//a[0]->GetYaxis()->SetTitle("Number of Jets (counts)");
	//figure out how to add in offsetting the axis as well

	//for (int i = 0; i < 10; i++)	{
			
			////////////////////////////////////////////////////////////
			//		NORMALIZE HISTOGRAMS
			////////////////////////////////////////////////////////////
			
			/*if (a[i]->Integral() != 0)	{
					double scale = (1/(a[i]->Integral()));
					a[i]->Scale(scale);
					//data[7]->SetMaximum(0.20);		
			}
			
			if (b[i]->Integral() != 0)	{
					double scale = (1/(b[i]->Integral()));
					b[i]->Scale(scale);
					//data[7]->SetMaximum(0.20);
			}		
					
			if (c[i]->Integral() != 0)	{
					double scale = (1/(c[i]->Integral()));
					c[i]->Scale(scale);				
			}*/
			
			////////////////////////////////////////////////////////////
			//		SET TITLES
			////////////////////////////////////////////////////////////
			
			//MAIN HISTOGRAM 
			//a[0]->SetTitle("Transverse Momentum");
			
			//AXES
			//a[0]->GetXaxis()->SetTitle("Transverse Momentum (Gev/c^2)");
			//a[0]->GetYaxis()->SetTitle("Number of Jets (counts)");
			
			
			
			////////////////////////////////////////////////////////////
			//		MODIFY HISTOGRAM APPEARANCE
			////////////////////////////////////////////////////////////
			
			//COLOR
			/*a[i]->SetFillColor(kBlack);
			b[i]->SetLineColor(kBlue);
			c[i]->SetLineColor(kSpring);*/
			//TITLE OFFSETS FOR AXES
			//a[i]->GetYaxis()->SetTitleOffset(1.3);
	//}
	

	TH1F *hvz_ratio = (TH1F*)a[3]->Clone("hvz_ratio"); //takes MC vz
  	hvz_ratio->SetTitle("");
  	//hvz_ratio->SetMaximum(5.587);
  	hvz_ratio->GetYaxis()->SetTitle("Ratio Data / MC");
  	hvz_ratio->GetYaxis()->SetTitleOffset(1.24);
  	hvz_ratio->Divide(b[3]); //divides by data vz 

  	TH1F *hbin_ratio = (TH1F*)a[4]->Clone("hbin_ratio"); //takes MC bin
  	hbin_ratio->SetTitle("");
  	//hvz_ratio->SetMaximum(5.587);
  	hbin_ratio->GetYaxis()->SetTitle("Ratio Data / MC");
  	hbin_ratio->GetYaxis()->SetTitleOffset(1.24);
  	hbin_ratio->Divide(b[4]); //divides by data bin 

  	TF1 *fVz = new TF1("fVz","[0]+[1]*x+[2]*x*x+[3]*x*x*x+[4]*x*x*x*x");
	//fVz->SetParameters(6.08192e-02,6.32282e-04, -5.48146e-04,-2.74674e-06 ,1.33737e-06);
	fVz->SetParameters(0.838193,-0.00376098,0.00262389,-5.44672e-05,2.31855e-05);

	TF1* fcen= new TF1("fcen","[0]*exp([1]+[2]*x+[3]*x*x+[4]*x*x*x)",0,40);
	fcen->SetParameters(2.10653e-02,5.61607,-1.41493e-01,1.00586e-03,-1.32625e-04);




	//////////////////////////////////////////////////////////////////////////////////////
	// 			CREATE LEGENDS
	//////////////////////////////////////////////////////////////////////////////////////
	
	TLegend *legs;
	//char name[100];
	//sprintf(name, "legend%d", i);
	legs = new TLegend(0.65,0.77,0.75,0.87); //(x_1, y_1, x_2, y_2)
	legs->AddEntry(a[0], "MC", "f"); 
	legs->AddEntry(b[0], "Data", "p");
		//legend[i]->AddEntry(c[i], "HIJING", "l"); 
		//legend[i]->SetHeader("KEY:");
	
	cout << "created legend" << endl;
	
	//////////////////////////////////////////////////////////////////////////////////////
	// 			CREATE CANVASES
	//////////////////////////////////////////////////////////////////////////////////////
	
	TCanvas *c0 = new TCanvas("c0","c0", 500, 500);
	TCanvas *c1 = new TCanvas("c1","c1", 500, 500);
	TCanvas *c2 = new TCanvas("c2","c2", 500, 500);
	TCanvas *c3 = new TCanvas("c3","c3", 500, 500);
	TCanvas *c4 = new TCanvas("c4","c4", 500, 500);
	TCanvas *c5 = new TCanvas("c5","c5", 500, 500);
	TCanvas *c6 = new TCanvas("c6","c6", 500, 500);
	TCanvas *c7 = new TCanvas("c7","c7", 500, 500);
	TCanvas *c8 = new TCanvas("c8","c8", 500, 500);
	TCanvas *c9 = new TCanvas("c9","c9", 500, 500);
	TCanvas *c10 = new TCanvas("c10","c10", 500, 500);
	TCanvas *c11 = new TCanvas("c11","c11", 500, 500);
	TCanvas *c12 = new TCanvas("c12","c12", 500, 500);

	
	/*TCanvas *c5 = new TCanvas("deltaPhi","deltaPhi", 500, 500);
	TCanvas *c6 = new TCanvas("DijetAsymmetry","DijetAsymmetry", 500, 500);
	TCanvas *c7 = new TCanvas("DeltaPhiECAT1","DeltaPhiECAT1", 500, 500);
	TCanvas *c8 = new TCanvas("DijetAsymmetryECAT1","DijetAsymmetryECAT1", 500, 500);
	TCanvas *c9 = new TCanvas("DeltaPhiECAT2DATA","DeltaPhiECAT2DATA", 500, 500);
	TCanvas *c10 = new TCanvas("DijetAsymmetryECAT2","DijetAsymmetryECAT2", 500, 500);*/
	
	cout << "canvasses created" << endl;
	///////////////////////////////////////////////////////////////////
	// 	OVERLAY: DRAW HISTOGRAMS & LEGENDS TO CANVASES 
	///////////////////////////////////////////////////////////////////
	
	c1->cd(); c1->SetLogy();
	a[0]->Draw("hist"); b[0]->Draw("psame"); legs->Draw("same");
	cout << "plot 1" << endl;

	c2->cd(); 
	a[1]->Draw("hist"); b[1]->Draw("psame"); legs->Draw("same");
	cout << "plot 2" << endl;

	c3->cd(); 
	a[2]->Draw("hist"); b[2]->Draw("psame"); legs->Draw("same");
	cout << "plot 3" << endl;

	
	c4->cd(); 
	a[3]->Draw("hist"); b[3]->Draw("psame"); legs->Draw("same");

	cout << "plot 4" << endl;

	c5->cd(); 
	hvz_ratio->Draw("p"); hvz_ratio->Fit("fVz", "", "", -15, 15);

	c0->cd(); 
	hbin_ratio->Draw("p"); hbin_ratio->Fit("fcen", "", "", 0, 40);

	/*cout << "plot 5" << endl;
	
	c6->cd(); 
	a[4]->Draw("hist"); b[4]->Draw("psame"); legs->Draw("same");

	cout << "plot 6" << endl;

	c7->cd(); 
	a[5]->Draw("hist"); b[5]->Draw("psame"); legs->Draw("same");

	c8->cd(); 
	a[6]->Draw("hist"); b[6]->Draw("psame"); legs->Draw("same");

	c9->cd(); 
	a[7]->Draw("hist"); b[7]->Draw("psame"); legs->Draw("same");

	c10->cd(); 
	a[8]->Draw("hist"); b[8]->Draw("psame"); legs->Draw("same");

	c11->cd(); 
	a[9]->Draw("hist"); b[9]->Draw("psame"); legs->Draw("same");

	c12->cd(); 
	a[10]->Draw("hist"); b[10]->Draw("psame"); legs->Draw("same");*/
	

	cout << "histograms drawn to canvas" << endl;

	/*c5->cd(); 
	a[4]->Draw(); b[4]->Draw("same"); c[4]->Draw("same"); legend[4]->Draw("same");
	c6->cd(); 
	a[5]->Draw(); b[5]->Draw("same"); c[5]->Draw("same"); legend[5]->Draw("same");
	c7->cd(); 
	a[6]->Draw(); b[6]->Draw("same"); c[6]->Draw("same"); legend[6]->Draw("same");
	c8->cd(); 
	a[7]->Draw(); b[7]->Draw("same"); c[7]->Draw("same"); legend[7]->Draw("same");
	c9->cd(); 
	a[8]->Draw(); b[8]->Draw("same"); c[8]->Draw("same"); legend[8]->Draw("same");
	c10->cd(); 
	a[9]->Draw(); b[9]->Draw("same"); c[9]->Draw("same"); legend[9]->Draw("same");*/
	
	/////////////////////////////////////////////////////////////////
	// 			CREATE SINGLE PDF  
	/////////////////////////////////////////////////////////////////
	
	
	/*c1->Print("special_QAplot_overlay.pdf[");
	c1->Print("special_QAplot_overlay.pdf");
	c2->Print("special_QAplot_overlay.pdf");
	c3->Print("special_QAplot_overlay.pdf");
	c4->Print("special_QAplot_overlay.pdf");
	c6->Print("special_QAplot_overlay.pdf");
	c7->Print("special_QAplot_overlay.pdf");
	c8->Print("special_QAplot_overlay.pdf");
	c9->Print("special_QAplot_overlay.pdf");
	c10->Print("special_QAplot_overlay.pdf");
	c11->Print("special_QAplot_overlay.pdf");
	c11->Print("special_QAplot_overlay.pdf]");*/


	/*c6->Print("akPu5PFoverlay.pdf");
	c7->Print("akPu5PFoverlay.pdf");
	c8->Print("akPu5PFoverlay.pdf");
	c9->Print("akPu5PFoverlay.pdf");
	c10->Print("akPu5PFoverlay.pdf");
	c10->Print("akPu5PFoverlay.pdf]");*/
	//printf("Output file closed.\n");
}	

